;+
; :Author: max
;-date:2018.12.26
;************************************IDL编程基础*******************
IDL程序文件以"pro"或者"function"开头,以"end"结尾，无论是过程还是函数，程序文件都是以"pro"为扩展名的ASCII文件
1 过程和函数
  1.1 过程同时可以有若干个参数或者关键字。
    pro 过程名[,参数1，...，参数n][关键字1，...，关键字n]
    end
  如果过程包含参数或者关键字，需要通过在命令行输入过程名称+参数、关键字的方式来运行
  1.2 函数
  与过程相比，IDL函数最大的区别是运行以后会返回一个值。函数以"function"语句开始，以"return"语句返回函数的计算结果，以"end"语句结束
    function 过程名[,参数1，...，参数n][关键字1，...，关键字n]
      return,表达式
    end
   其调用方式与过程不同。其运行方式为：变量=函数名[,参数1，...，参数n][关键字1，...，关键字n]
  1.3程序的相互调用*********
   IDL的过程、函数之间可以相互调用，从而组合出更为复杂的程序。程序相互调用时往往需要利用参数和关键字传递数据。
2 控制语句 3种基本的程序结构：顺序结构，选择结构和循环结构。
  2.1 选择结构
    2.1.1 if语句，if语句的基本形式有三种，分别如下：
    (1)当if后面的条件表达式为真时，执行单个语句或者语句序列
      if 条件表达式 then 语句 或者 if 条件表达式 then begin 语句序列 
      endif
    (2)当if后面的条件表达式为真时，执行单个语句或者语句序列；当条件表达式为假时，执行endelse后面的单个语句或者语句序列
      if 条件表达式 then 语句1 endif  else 语句2 或者 if 条件表达式 then begin 语句序列1 endif else begin 语句序列2 
      endelse
    (3)if后面的条件表达式为真时，执行单个语句或者语句序列；当条件表达式为假时,执行endif else if后面的单个语句或者语句序列，直到最后的endelse为止。
      if 条件表达式 then begin 语句1 endif else if 条件表达式 then begin 语句2 
      endelse 
    2.1.2 case语句 相比于if语句，适合处理这种多分支的选择。
    case语句基本的形式为：case 表达式0 of
                          表达式1：语句1
                          表达式2：语句2
                          表达式3： begin 语句序列1 end
                          表达式n：语句n
                          else: 语句n+1
                     endcase
     解释：执行时，首先计算case后面表达式0的值，然后检查表达式1的值是否与表达式0相等，如果相等则执行语句1，否则再比较表达式2，else表示没有找到合适的值，则执行这一语句
     2.1.3 switch语句 与case语句不同的是，switch语句会执行符合条件分支后的每一个分支，而不仅仅是符合条件的当前分支
                    switch 表达式0 of
                        表达式1：语句1
                        表达式2：语句2
                        表达式3： begin 语句序列1 end
                        表达式n：语句n
                        else: 语句n+1
                    endswitch
            如果在switch 语句执行过程中想在某条语句执行完后退出的话，需要在这条语句后面加上break语句
  2.2 循环结构
      2.2.1 for 语句
        for i=1,n do 语句或者 for i=1,n do begin 语句序列 或者 for i=1,n,inc do begin 语句  
        endfor，inc为循环步长，缺省值为1
      2.2.2 while 语句 一般用于事先不能确定循环次数的情况
        while 条件表达式 do 语句 或者while 条件表达式 do begin 语句序列
        endwhile
      2.2.3 repeat 语句，类似于while语句，区别在与先执行循环体，然后在判断条件表达式值，至少执行一次循环
        repeat 条件表达式 endrep until 语句 或者repeat begin 语句序列 endrep until 条件表达式 语句
      2.2.4 循环语句的嵌套
  2.3 break 和 continue
    continue语句只能用于for,while,repeat等循环语句中，作用是终止当前循环体，并跳转到判断循环条件的语句处，继续下一次的循环。
    break语句用于for,while,repeat等循环语句或者if,case,switch等选择语句中。
3 参数和关键字
  3.1 参数 主要用于程序相互调用过程中值的传递
  pro/function 过程名/函数名，参数1，参数2，...，参数n ,参数必须先定义再使用
  在定义和使用参数时，需要注意形参和实参的区别。在定义过程中，其参数为形参，调用时为实参，实参和形参的变量名可以不同，只要位置一致即可
  3.2 关键字 
  pro/function 过程名/函数名，关键字1=关键字变量1，...，关键字n=关键字变量n。其中等号左边是关键字名，仅起一个标识作用，而右边的关键字变量才是过程/函数运行时真正的变量
  不同于参数，关键字因为有名字，所以使用时其顺序不需要跟定义时保持一致。
  3.3 值传递和地址传递
  地址传递，字程序中对变量的修改会在主程序中生效；值传递，子程序对变量的修改在主程序中无效。
  IDL中变量名，数组名，结构体名和指针代表着数据的地址，其为地址传递；而常量，子数组，结构体域和表达式作为参数或者关键字的时候是值传递，系统变量也是值传递
  3.4 参数和关键字的监测
  函数n_params用于统计参数(不包括关键字)的数目，result=n_params()；函数keyword_set()用于检测参数或者关键字是否被设定
4 变量的作用域 分为全局变量和局部变量
  4.1 局部变量 只能在定义它的过程/函数内部使用，而不能在其他过程/函数内使用
  4.2 全局变量  IDL的全局变量包括系统变量和公共变量两类
  系统变量包括参数变量，图形变量，系统配置变量和错误处理变量等，以！开头来与其他变量区分
  公共变量通过 common 语句进行定义和使用。语法：common block_name,var1,...,varn ,其中block_name为公共变量块的名称，参数var1,...,varn为公共变量块所包含的变量名称。
  公共变量块需要先声明再引用。需要注意的是，公共变量块定义后其包含的变量数目不能改变，但是变量的类型和大小可以修改。
5 其他
  5.1 IDL程序优化
    5.1.1 以数组为操作主体
    IDL是面向数组的语言，能够对数组直接进行运算
    5.1.2 内存管理 编写IDL程序过程中，定义的变量越少越好，并尽可能少使用全局变量，而通过参数和关键字传递数据。
  5.2 调用外部命令
    过程spawn用于调用外部程序，产生一个子进程来执行一个命令或一系列命令。
    spawn[,command][,/hide],其中commmand为待执行的命令；关键字hide用于设置隐藏命令行窗口，如果该关键字未设置则默认显示命令行窗口
    